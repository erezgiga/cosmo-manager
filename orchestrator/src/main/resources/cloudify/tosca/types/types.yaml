definitions:

    ##################################################################################
    # Auto imported:
    ##################################################################################
    imports:
        - 'celery_worker_installer'
        - 'celery_plugin_installer'
        - 'cloudify.policies'

    ##################################################################################
    # Base type definitions
    ##################################################################################
    types:

        # A tier in a topology
        cloudify.tosca.types.tier: { }

        # A host (physical / virtual or LXC) in a topology
        cloudify.tosca.types.host:
            interfaces:
                - "cloudify.tosca.interfaces.host_provisioner"
                - "cloudify.tosca.interfaces.worker_installer"
                - "cloudify.tosca.interfaces.plugin_installer"
            properties:
                install_agent: 'false'

        # A middleware component in a topology
        cloudify.tosca.types.middleware_server:
            interfaces:
                - "cloudify.tosca.interfaces.middleware_component_installer"

        cloudify.tosca.types.db_server:
            derived_from: "cloudify.tosca.types.middleware_server"

        cloudify.tosca.types.web_server:
            derived_from: "cloudify.tosca.types.middleware_server"

        # An application artifact to deploy
        cloudify.tosca.types.app_module:
            interfaces:
                - "cloudify.tosca.interfaces.app_module_installer"


    ##################################################################################
    # Base relationship definitions
    ##################################################################################
    relationships:

        cloudify.tosca.relationships.depends_on:
            workflow: |
              define relationship_workflow
                log message: 'relationship workflow: node[${node.id}], list[${v:execution_list}]'
                iterator on: '$v:execution_list', to_v: 'executed'
                  log message: 'relationship workflow item: node[${node.id}], item[${v:executed.operation}]'
                  collect_params names: '$node.execution_params_names',
                                 to_f: 'execution_params'
                  execute_operation operation: '${v:executed.operation}',
                                    target_node_id: '${v:target_node_id}',
                                    to_f: '${v:executed.output_field}',
                                    params: '$f:execution_params'

        cloudify.tosca.relationships.connected_to:
            derived_from: "cloudify.tosca.relationships.depends_on"

        cloudify.tosca.relationships.contained_in:
            derived_from: "cloudify.tosca.relationships.depends_on"


    ##################################################################################
    # Base interface definitions
    ##################################################################################
    interfaces:

        # provision and manage host lifecycle
        cloudify.tosca.interfaces.host_provisioner:
            operations:
                - "provision"
                - "terminate"
                - "start"
                - "pause"
                - "restart"

        # installs middleware components
        cloudify.tosca.interfaces.middleware_component_installer:
            operations:
                - "install"
                - "uninstall"
                - "start"
                - "stop"
                - "restart"

        cloudify.tosca.interfaces.app_module_installer:
            operations:
                - "deploy"
                - "undeploy"
                - "stop"
                - "start"

        # start and manage celery worker lifecycle
        cloudify.tosca.interfaces.worker_installer:
            operations:
                - "install"
                - "restart"

        # installs plugins on the agent host
        cloudify.tosca.interfaces.plugin_installer:
            operations:
                - "install"

    ##################################################################################
    # Base plan definitions
    ##################################################################################
    plans:

        cloudify.tosca.types.host:
            init:
                radial: |
                    define host_init
                      execute_operation operation: 'provision'
                      execute_operation operation: 'start'
                      given
                        that '${node.properties.install_agent} == true'
                          event event: { "stage" => "Installing agent" }
                          state resource_id: '${node.id}', state: { reachable: "true" }
                          log message: 'installing agent on host: ${node.id}'
                          execute_operation operation: 'cloudify.tosca.interfaces.worker_installer.install'
                          event event: { "stage" => "Installing plugins" }
                          log message: 'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}'
                          iterator on: '$node.plugins_to_install', to_v: 'plugin'
                            log message: 'installing plugin: ${v:plugin.name} on host: ${node.id}'
                            event event: { "stage" => "installing plugin: ${v:plugin.name}" }
                            execute_operation operation: 'cloudify.tosca.interfaces.plugin_installer.install', params: {
                              plugin: {
                                name: '${v:plugin.name}',
                                url: '${v:plugin.url}'
                               }
                            }
                            log message: 'successfully installed plugin: ${v:plugin.name} on host: ${node.id}'
                          log message: 'restarting worker on host: ${node.id}'
                          execute_operation operation: 'cloudify.tosca.interfaces.worker_installer.restart'

        cloudify.tosca.types.middleware_server:
            init:
                radial: |
                    define middleware_server_init
                        event event: { "stage" => "Installing Middleware" }
                        execute_operation operation: 'install'
                        event event: { "stage" => "Starting Middleware" }
                        execute_operation operation: 'start'

        cloudify.tosca.types.app_module:
            init:
                radial: |
                    define app_module_init
                        event event: { "stage" => "Deploying application" }
                        execute_operation operation: 'deploy'
                        event event: { "stage" => "Starting application" }
                        execute_operation operation: 'start'


    ##################################################################################
    # Base artifact definitions
    ##################################################################################
    artifacts:

        # Basic plugin artifact
        cloudify.tosca.artifacts.plugin: { }

        # Remote plugin artifact
        cloudify.tosca.artifacts.remote_plugin:
            derived_from: "cloudify.tosca.artifacts.plugin"

        # Worker plugin artifact - runs on Cloudify agent
        cloudify.tosca.artifacts.agent_plugin:
            derived_from: "cloudify.tosca.artifacts.plugin"



